{
  "timestamp": "2025-09-05T14:57:10.252Z",
  "messages": [],
  "context": {
    "directoryStructure": "Below is a snapshot of this project's file structure at the start of the conversation. This snapshot will NOT update during the conversation.\n\n- D:\\ide\\AI-CLI\\Kode\\\n  - .claude\\\n    - agents\\\n      - a-agent-like-linus-keep-it-sim.md\n      - dao-qi-harmony-designer.md\n      - simplicity-auditor.md\n      - test-agent.md\n      - test-writer.md\n  - .dockerignore\n  - .github\\\n    - ISSUE_TEMPLATE\\\n      - bug_report.md\n    - workflows\\\n      - npm-publish.yml\n      - release.yml\n      - version-bump.yml\n  - .gitignore\n  - .kode\\\n    - agents\\\n      - code-writer.md\n      - codebase-search-specialist.md\n      - coder.md\n      - dao-qi-harmony-designer.md\n      - docs-specialist.md\n      - docs-writer.md\n      - planner.md\n      - search-specialist.md\n      - test-specialist.md\n      - test-writer.md\n      - ui-ux-designer.md\n    - commands\\\n      - compact.example.json\n      - name.example.json\n    - context_export\\\n      - 0905_1408_b32e199d-a8c5-4244-b689-06e956b18402.json\n  - .kodeignore\n  - .npmignore\n  - .prettierignore\n  - .prettierrc\n  - .trae\\\n    - rules\\\n      - project_rules.md\n  - AGENTS.md\n  - CLAUDE.md\n  - CONTRIBUTING.md\n  - DEPLOYMENT_GUIDE.md\n  - Dockerfile\n  - LICENSE\n  - README.md\n  - README.zh-CN.md\n  - deprecated\\\n    - .kode\\\n      - agents\\\n  - docs\\\n    - ELEGANT_TAB_IMPROVEMENT_PLAN.md\n    - PROJECT_STRUCTURE.md\n    - PUBLISH.md\n    - TAB_BEHAVIOR_DEMO.md\n    - TERMINAL_BEHAVIOR_ANALYSIS.md\n    - TERMINAL_TAB_TEST.md\n    - TERMINAL_VS_CURRENT.md\n    - agents-system.md\n    - custom-commands.md\n    - develop-zh\\\n      - README.md\n      - architecture.md\n      - configuration.md\n      - modules\\\n      - overview.md\n      - security-model.md\n      - tools-system.md\n    - develop\\\n      - README.md\n      - architecture.md\n      - configuration.md\n      - modules\\\n      - overview.md\n      - security-model.md\n      - tools-system.md\n    - intelligent-completion.md\n    - mention-system.md\n    - system-design.md\n  - main.js\n  - package.json\n  - prompt\\\n    - generate_command.md\n    - ignore_rule_update.md\n  - scripts\\\n    - build.ts\n    - postinstall.js\n    - prepublish-check.js\n    - publish-workaround.js\n  - src\\\n    - ProjectOnboarding.tsx\n    - Tool.ts\n    - checkpoint\\\n      - db\\\n      - types\\\n    - commands.ts\n    - commands\\\n      - agents.tsx\n      - approvedTools.ts\n      - bug.tsx\n      - clear.ts\n      - compact.ts\n      - config-cmd.ts\n      - config.tsx\n      - context.ts\n      - cost.ts\n      - ctx_viz.ts\n      - doctor.ts\n      - exit.ts\n      - help.tsx\n      - ignore.ts\n      - ignore\\\n      - init.ts\n      - kiro-spec\\\n      - lasti.ts\n      - lastreq.ts\n      - listen.ts\n      - login.tsx\n      - logout.tsx\n      - mcp.ts\n      - model.tsx\n      - modelstatus.tsx\n      - onboarding.tsx\n      - pr_comments.ts\n      - prompt\\\n      - quit.ts\n      - refreshCommands.ts\n      - release-notes.ts\n      - resume.tsx\n      - review.ts\n      - terminalSetup.ts\n      - todo.ts\n      - todo\\\n      - undo.ts\n    - components\\\n      - ApproveApiKey.tsx\n      - AsciiLogo.tsx\n      - AutoUpdater.tsx\n      - Bug.tsx\n      - Config.tsx\n      - ConsoleOAuthFlow.tsx\n      - Cost.tsx\n      - CostThresholdDialog.tsx\n      - CustomSelect\\\n      - FallbackToolUseRejectedMessage.tsx\n      - FileEditToolUpdatedMessage.tsx\n      - Help.tsx\n      - HighlightedCode.tsx\n      - InvalidConfigDialog.tsx\n      - Link.tsx\n      - LogSelector.tsx\n      - Logo.tsx\n      - MCPServerApprovalDialog.tsx\n      - MCPServerDialogCopy.tsx\n      - MCPServerMultiselectDialog.tsx\n      - Message.tsx\n      - MessageResponse.tsx\n      - MessageSelector.tsx\n      - ModeIndicator.tsx\n      - ModelConfig.tsx\n      - ModelListManager.tsx\n      - ModelSelector.tsx\n      - ModelStatusDisplay.tsx\n      - Onboarding.tsx\n      - PressEnterToContinue.tsx\n      - PromptInput.tsx\n      - SentryErrorBoundary.ts\n      - Spinner.tsx\n      - StickerRequestForm.tsx\n      - StructuredDiff.tsx\n      - TextInput.tsx\n      - TodoItem.tsx\n      - TokenWarning.tsx\n      - ToolUseLoader.tsx\n      - TrustDialog.tsx\n      - binary-feedback\\\n      - messages\\\n      - permissions\\\n    - constants\\\n      - betas.ts\n      - claude-asterisk-ascii-art.tsx\n      - figures.ts\n      - keys.ts\n      - macros.ts\n      - modelCapabilities.ts\n      - models.ts\n      - oauth.ts\n      - product.ts\n      - prompts.ts\n      - releaseNotes.ts\n    - context.ts\n    - context\\\n      - PermissionContext.tsx\n    - cost-tracker.ts\n    - entrypoints\\\n      - cli.tsx\n      - cli\\\n      - mcp.ts\n    - history.ts\n    - hooks\\\n      - completion\\\n      - useApiKeyVerification.ts\n      - useArrowKeyHistory.ts\n      - useCanUseTool.ts\n      - useCancelRequest.ts\n      - useDoublePress.ts\n      - useExitOnCtrlCD.ts\n      - useInterval.ts\n      - useLogMessages.ts\n      - useLogStartupTime.ts\n      - useNotifyAfterTimeout.ts\n      - usePermissionRequestLogging.ts\n      - useSubcommandCompletion.ts\n      - useSubcommandRegistry.ts\n      - useTerminalSize.ts\n      - useTextInput.ts\n      - useUnifiedCompletion.ts\n    - messages.ts\n    - monitor\\\n      - CycleDetector.ts\n      - ToolCallFailureMonitor.ts\n      - ToolCallHistory.ts\n      - ToolCallMonitor.ts\n      - config.ts\n      - errors.ts\n      - failureTypes.ts\n      - index.ts\n      - types.ts\n    - permissions.ts\n    - query.ts\n    - screens\\\n      - ConfigureNpmPrefix.tsx\n      - Doctor.tsx\n      - LogList.tsx\n      - REPL.tsx\n      - ResumeConversation.tsx\n    - services\\\n      - adapters\\\n      - browserMocks.ts\n      - claude.ts\n      - customCommands.ts\n      - fileFreshness.ts\n      - gpt5ConnectionTest.ts\n      - mcpClient.ts\n      - mcpServerApproval.tsx\n      - mentionProcessor.ts\n      - modelAdapterFactory.ts\n      - notifier.ts\n      - oauth.ts\n      - openai.ts\n      - responseStateManager.ts\n      - sentry.ts\n      - statsig.ts\n      - statsigStorage.ts\n      - systemReminder.ts\n      - todoService.ts\n      - vcr.ts\n    - test\\\n      - grep-test\\\n      - ripgrep-test.ts\n      - testAdapters.ts\n    - tools.ts\n    - tools\\\n      - ArchitectTool\\\n      - AskExpertModelTool\\\n      - BashTool\\\n      - ContextCompactTool\\\n      - FileEditTool\\\n      - FileReadTool\\\n      - FileWriteTool\\\n      - GlobTool\\\n      - GrepTool\\\n      - MCPTool\\\n      - MemoryReadTool\\\n      - MemoryWriteTool\\\n      - MultiEditTool\\\n      - NotebookEditTool\\\n      - NotebookReadTool\\\n      - StickerRequestTool\\\n      - TaskTool\\\n      - ThinkTool\\\n      - TodoWriteTool\\\n      - URLFetcherTool\\\n      - WebSearchTool\\\n      - lsTool\\\n    - types\\\n      - PermissionMode.ts\n      - RequestContext.ts\n      - conversation.ts\n      - logs.ts\n      - modelCapabilities.ts\n      - notebook.ts\n      - todo.ts\n    - utils\\\n      - Cursor.ts\n      - PersistentShell.ts\n      - advancedFuzzyMatcher.ts\n      - agentLoader.ts\n      - agentStorage.ts\n      - array.ts\n      - ask.tsx\n      - auth.ts\n      - autoCompactCore.ts\n      - autoUpdater.ts\n      - betas.ts\n      - browser.ts\n      - cleanup.ts\n      - commandConfig.ts\n      - commands.ts\n      - commonUnixCommands.ts\n      - config.ts\n      - configLoader.ts\n      - configTemplate.ts\n      - contextStatistics.ts\n      - conversationRecovery.ts\n      - debugLogger.ts\n      - detectGrepTool.ts\n      - diff.ts\n      - directoryTraverser.ts\n      - env.ts\n      - errors.ts\n      - exampleCommands.ts\n      - execFileNoThrow.ts\n      - expertChatStorage.ts\n      - fetchPolyfill.ts\n      - file.ts\n      - fileRecoveryCore.ts\n      - format.tsx\n      - fuzzyMatcher.ts\n      - generators.ts\n      - git.ts\n      - globalLogger.ts\n      - http.ts\n      - ignoreParser.ts\n      - imagePaste.ts\n      - json.ts\n      - linuxGrep.ts\n      - log.ts\n      - markdown.ts\n      - messageContextManager.ts\n      - messages.tsx\n      - model.ts\n      - permissions\\\n      - responseState.ts\n      - ripgrep.ts\n      - secureFile.ts\n      - sessionState.ts\n      - state.ts\n      - style.ts\n      - subcommandRegistry.ts\n      - terminal.ts\n      - theme.ts\n      - thinking.ts\n      - todoStorage.ts\n      - tokens.ts\n      - toolExecutionController.ts\n      - unaryLogging.ts\n      - user.ts\n      - validate.ts\n      - windowsGrep.ts\n  - test\\\n    - customCommands.test.ts\n    - monitor\\\n      - ToolCallHistory.test.ts\n      - ToolCallMonitor.test.ts\n      - __test__\\\n    - secureFile.test.ts\n    - tools\\\n      - ContextCompactTool.test.ts\n  - tsconfig.json\n  - yoga.wasm\n",
    "gitStatus": "This is the git status at the start of the conversation. Note that this status is a snapshot in time, and will not update during the conversation.\nCurrent branch: kkkqkx123-edit\n\nMain branch (you will usually use this for PRs): main\n\nStatus:\n(clean)\n\nRecent commits:\n454af20 temp\n6236a17 first commit\n53234ba Merge pull request #67 from xiaomao87/fix-dockerfile\n20111a0 Update README.zh-CN.md\nf857fb9 Update README.md\n\nYour recent commits:\n454af20 temp\n6236a17 first commit",
    "codeStyle": "The codebase follows strict style guidelines shown below. All code changes must strictly adhere to these guidelines to maintain consistency and quality.\n\nContents of D:\\ide\\AI-CLI\\Kode\\AGENTS.md:\n\n# AGENTS.md\r\n\r\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\r\n\r\n## Development Commands\r\n\r\n### Essential Development Workflow\r\n```bash\r\n# Install dependencies\r\nbun install\r\n\r\n# Run in development mode (hot reload with verbose output)\r\nbun run dev\r\n\r\n# Build the CLI wrapper for distribution\r\nbun run build\r\n\r\n# Clean build artifacts\r\nbun run clean\r\n\r\n# Run tests\r\nbun test\r\n\r\n# Check types\r\nbun run typecheck\r\n\r\n# Format code\r\nbun run format\r\nbun run format:check\r\n```\r\n\r\n### Build System Details\r\n- **Primary Build Tool**: Bun (required for development)\r\n- **Distribution**: Smart CLI wrapper (`cli.js`) that prefers Bun but falls back to Node.js with tsx loader\r\n- **Entry Point**: `src/entrypoints/cli.tsx`\r\n- **Build Output**: `cli.js` (executable wrapper) and `.npmrc` (npm configuration)\r\n\r\n### Publishing\r\n```bash\r\n# Publish to npm (requires build first)\r\nnpm publish\r\n# Or with bundled dependency check skip:\r\nSKIP_BUNDLED_CHECK=true npm publish\r\n```\r\n\r\n## High-Level Architecture\r\n\r\n### Core System Design\r\nKode implements a **three-layer parallel architecture** inspired by Claude Code:\r\n\r\n1. **User Interaction Layer** (`src/screens/REPL.tsx`)\r\n   - Interactive terminal interface using Ink (React for CLI)\r\n   - Command parsing and user input handling\r\n   - Real-time UI updates and syntax highlighting\r\n\r\n2. **Orchestration Layer** (`src/tools/TaskTool/`)\r\n   - Dynamic agent system for task delegation\r\n   - Multi-model collaboration and switching\r\n   - Context management and conversation continuity\r\n\r\n3. **Tool Execution Layer** (`src/tools/`)\r\n   - Specialized tools for different capabilities (File I/O, Bash, Grep, etc.)\r\n   - Permission system for secure tool access\r\n   - MCP (Model Context Protocol) integration\r\n\r\n### Multi-Model Architecture\r\n**Key Innovation**: Unlike single-model systems, Kode supports unlimited AI models with intelligent collaboration:\r\n\r\n- **ModelManager** (`src/utils/model.ts`): Unified model configuration and switching\r\n- **Model Profiles**: Each model has independent API endpoints, authentication, and capabilities\r\n- **Model Pointers**: Default models for different purposes (main, task, reasoning, quick)\r\n- **Dynamic Switching**: Runtime model changes without session restart\r\n\r\n### Agent System (`src/utils/agentLoader.ts`)\r\n**Dynamic Agent Configuration Loading** with 5-tier priority system:\r\n1. Built-in (code-embedded)\r\n2. `~/.claude/agents/` (Claude user)\r\n3. `~/.kode/agents/` (Kode user)\r\n4. `./.claude/agents/` (Claude project)\r\n5. `./.kode/agents/` (Kode project)\r\n\r\nAgents are defined as markdown files with YAML frontmatter:\r\n```markdown\r\n---\r\nname: agent-name\r\ndescription: \"When to use this agent\"\r\ntools: [\"FileRead\", \"Bash\"] # or \"*\" for all tools\r\nmodel: model-name # optional\r\n---\r\n\r\nSystem prompt content here...\r\n```\r\n\r\n### Tool Architecture\r\nEach tool follows a consistent pattern in `src/tools/[ToolName]/`:\r\n- `[ToolName].tsx`: Main tool implementation with React UI\r\n- `prompt.ts`: Tool-specific system prompts\r\n- Tool schema using Zod for validation\r\n- Permission-aware execution\r\n\r\n### Service Layer\r\n- **Claude Service** (`src/services/claude.ts`): Primary AI model interface\r\n- **OpenAI Service** (`src/services/openai.ts`): OpenAI-compatible models\r\n- **Model Adapter Factory** (`src/services/modelAdapterFactory.ts`): Unified model interface\r\n- **MCP Client** (`src/services/mcpClient.ts`): Model Context Protocol for tool extensions\r\n\r\n### Configuration System (`src/utils/config.ts`)\r\n**Hierarchical Configuration** supporting:\r\n- Global config (`~/.kode.json`)\r\n- Project config (`./.kode.json`)\r\n- Environment variables\r\n- CLI parameter overrides\r\n- Multi-model profile management\r\n\r\n### Context Management\r\n- **Message Context Manager** (`src/utils/messageContextManager.ts`): Intelligent context window handling\r\n- **Memory Tools** (`src/tools/MemoryReadTool/`, `src/tools/MemoryWriteTool/`): Persistent memory across sessions\r\n- **Project Context** (`src/context.ts`): Codebase understanding and file relationships\r\n\r\n### Permission System (`src/permissions.ts`)\r\n**Security-First Tool Access**:\r\n- Granular permission requests for each tool use\r\n- User approval required for file modifications and command execution\r\n- Tool capability filtering based on agent configuration\r\n- Secure file path validation and sandboxing\r\n\r\n## Important Implementation Details\r\n\r\n### Async Tool Descriptions\r\n**Critical**: Tool descriptions are async functions that must be awaited:\r\n```typescript\r\n// INCORRECT\r\nconst description = tool.description\r\n\r\n// CORRECT\r\nconst description = typeof tool.description === 'function' \r\n  ? await tool.description() \r\n  : tool.description\r\n```\r\n\r\n### Agent Loading Performance\r\n- **Memoization**: LRU cache to avoid repeated file I/O\r\n- **Hot Reload**: File system watchers for real-time agent updates\r\n- **Parallel Loading**: All agent directories scanned concurrently\r\n\r\n### UI Framework Integration\r\n- **Ink**: React-based terminal UI framework\r\n- **Component Structure**: Follows React patterns with hooks and context\r\n- **Terminal Handling**: Custom input handling for complex interactions\r\n\r\n### Error Handling Strategy\r\n- **Graceful Degradation**: System continues with built-in agents if loading fails\r\n- **User-Friendly Errors**: Clear error messages with suggested fixes\r\n- **Debug Logging**: Comprehensive logging system (`src/utils/debugLogger.ts`)\r\n\r\n### TypeScript Integration\r\n- **Strict Types**: Full TypeScript coverage with strict mode\r\n- **Zod Schemas**: Runtime validation for all external data\r\n- **Tool Typing**: Consistent `Tool` interface for all tools\r\n\r\n## Key Files for Understanding the System\r\n\r\n### Core Entry Points\r\n- `src/entrypoints/cli.tsx`: Main CLI application entry\r\n- `src/screens/REPL.tsx`: Interactive terminal interface\r\n\r\n### Tool System\r\n- `src/tools.ts`: Tool registry and exports\r\n- `src/Tool.ts`: Base tool interface definition\r\n- `src/tools/TaskTool/TaskTool.tsx`: Agent orchestration tool\r\n\r\n### Configuration & Model Management\r\n- `src/utils/config.ts`: Configuration management\r\n- `src/utils/model.ts`: Model manager and switching logic\r\n- `src/utils/agentLoader.ts`: Dynamic agent configuration loading\r\n\r\n### Services & Integrations\r\n- `src/services/claude.ts`: Main AI service integration\r\n- `src/services/mcpClient.ts`: MCP tool integration\r\n- `src/utils/messageContextManager.ts`: Context window management\r\n\r\n## Development Patterns\r\n\r\n### Adding New Tools\r\n1. Create directory in `src/tools/[ToolName]/`\r\n2. Implement `[ToolName].tsx` following existing patterns\r\n3. Add `prompt.ts` for tool-specific prompts\r\n4. Register in `src/tools.ts`\r\n5. Update tool permissions in agent configurations\r\n\r\n### Adding New Commands\r\n1. Create command file in `src/commands/[command].tsx`\r\n2. Implement command logic with Ink UI components\r\n3. Register in `src/commands.ts`\r\n4. Add command to help system\r\n\r\n### Model Integration\r\n1. Add model profile to `src/constants/models.ts`\r\n2. Implement adapter if needed in `src/services/adapters/`\r\n3. Update model capabilities in `src/constants/modelCapabilities.ts`\r\n4. Test with existing tool suite\r\n\r\n### Agent Development\r\n1. Create `.md` file with proper YAML frontmatter\r\n2. Place in appropriate directory based on scope\r\n3. Test with `/agents` command\r\n4. Verify tool permissions work correctly",
    "claudeFiles": "NOTE: Additional project documentation files (AGENTS.md, CLAUDE.md) were found. When working in these directories, make sure to read and follow the instructions in the corresponding files:\n- D:\\ide\\AI-CLI\\Kode\\D:\\ide\\AI-CLI\\Kode\\AGENTS.md\n- D:\\ide\\AI-CLI\\Kode\\D:\\ide\\AI-CLI\\Kode\\CLAUDE.md",
    "readme": "# Kode - AI Coding\r\n<img width=\"991\" height=\"479\" alt=\"image\" src=\"https://github.com/user-attachments/assets/c1751e92-94dc-4e4a-9558-8cd2d058c1a1\" />  <br> \r\n[![npm version](https://badge.fury.io/js/@shareai-lab%2Fkode.svg)](https://www.npmjs.com/package/@shareai-lab/kode)\r\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\r\n[![AGENTS.md](https://img.shields.io/badge/AGENTS.md-Compatible-brightgreen)](https://agents.md)\r\n\r\n[中文文档](README.zh-CN.md) | [Contributing](CONTRIBUTING.md) | [Documentation](docs/)\r\n\r\n## 🎉 Big Announcement: We're Now Apache 2.0 Licensed!\r\n\r\n**Great news for the developer community!** In our commitment to democratizing AI agent technology and fostering a vibrant ecosystem of innovation, we're thrilled to announce that Kode has transitioned from AGPLv3 to the **Apache 2.0 license**.\r\n\r\n### What This Means for You:\r\n- ✅ **Complete Freedom**: Use Kode in any project - personal, commercial, or enterprise\r\n- ✅ **Build Without Barriers**: Create proprietary solutions without open-sourcing requirements\r\n- ✅ **Simple Attribution**: Just maintain copyright notices and license info\r\n- ✅ **Join a Movement**: Be part of accelerating the world's transition to AI-powered development\r\n\r\nThis change reflects our belief that the future of software development is collaborative, open, and augmented by AI. By removing licensing barriers, we're empowering developers worldwide to build the next generation of AI-assisted tools and workflows. Let's build the future together! 🚀\r\n\r\n## 📢 Update Log\r\n\r\n**2025-08-29**: We've added Windows support! All Windows users can now run Kode using Git Bash, Unix subsystems, or WSL (Windows Subsystem for Linux) on their computers.\r\n\r\n\r\n## 🤝 AGENTS.md Standard Support\r\n\r\n**Kode proudly supports the [AGENTS.md standard protocol](https://agents.md) initiated by OpenAI** - a simple, open format for guiding programming agents that's used by 20k+ open source projects.\r\n\r\n### Full Compatibility with Multiple Standards\r\n\r\n- ✅ **AGENTS.md** - Native support for the OpenAI-initiated standard format\r\n- ✅ **CLAUDE.md** - Full backward compatibility with Claude Code configurations  \r\n- ✅ **Subagent System** - Advanced agent delegation and task orchestration\r\n- ✅ **Cross-platform** - Works with 20+ AI models and providers\r\n\r\nUse `# Your documentation request` to generate and maintain your AGENTS.md file automatically, while maintaining full compatibility with existing Claude Code workflows.\r\n\r\n## Overview\r\n\r\nKode is a powerful AI assistant that lives in your terminal. It can understand your codebase, edit files, run commands, and handle entire workflows for you.\r\n\r\n> **⚠️ Security Notice**: Kode runs in YOLO mode by default (equivalent to Claude's `--dangerously-skip-permissions` flag), bypassing all permission checks for maximum productivity. YOLO mode is recommended only for trusted, secure environments when working on non-critical projects. If you're working with important files or using models of questionable capability, we strongly recommend using `kode --safe` to enable permission checks and manual approval for all operations.\r\n> \r\n> **📊 Model Performance**: For optimal performance, we recommend using newer, more capable models designed for autonomous task completion. Avoid older Q&A-focused models like GPT-4o or Gemini 2.5 Pro, which are optimized for answering questions rather than sustained independent task execution. Choose models specifically trained for agentic workflows and extended reasoning capabilities.\r\n\r\n<img width=\"600\" height=\"577\" alt=\"image\" src=\"https://github.com/user-attachments/assets/8b46a39d-1ab6-4669-9391-14ccc6c5234c\" />\r\n\r\n## Features\r\n\r\n### Core Capabilities\r\n- 🤖 **AI-Powered Assistance** - Uses advanced AI models to understand and respond to your requests\r\n- 🔄 **Multi-Model Collaboration** - Flexibly switch and combine multiple AI models to leverage their unique strengths\r\n- 🦜 **Expert Model Consultation** - Use `@ask-model-name` to consult specific AI models for specialized analysis\r\n- 👤 **Intelligent Agent System** - Use `@run-agent-name` to delegate tasks to specialized subagents\r\n- 📝 **Code Editing** - Directly edit files with intelligent suggestions and improvements\r\n- 🔍 **Codebase Understanding** - Analyzes your project structure and code relationships\r\n- 🚀 **Command Execution** - Run shell commands and see results in real-time\r\n- 🛠️ **Workflow Automation** - Handle complex development tasks with simple prompts\r\n\r\n### 🎯 Advanced Intelligent Completion System\r\nOur state-of-the-art completion system provides unparalleled coding assistance:\r\n\r\n#### Smart Fuzzy Matching\r\n- **Hyphen-Aware Matching** - Type `dao` to match `run-agent-dao-qi-harmony-designer`\r\n- **Abbreviation Support** - `dq` matches `dao-qi`, `nde` matches `node`\r\n- **Numeric Suffix Handling** - `py3` intelligently matches `python3`\r\n- **Multi-Algorithm Fusion** - Combines 7+ matching algorithms for best results\r\n\r\n#### Intelligent Context Detection\r\n- **No @ Required** - Type `gp5` directly to match `@ask-gpt-5`\r\n- **Auto-Prefix Addition** - Tab/Enter automatically adds `@` for agents and models\r\n- **Mixed Completion** - Seamlessly switch between commands, files, agents, and models\r\n- **Smart Prioritization** - Results ranked by relevance and usage frequency\r\n\r\n#### Unix Command Optimization\r\n- **500+ Common Commands** - Curated database of frequently used Unix/Linux commands\r\n- **System Intersection** - Only shows commands that actually exist on your system\r\n- **Priority Scoring** - Common commands appear first (git, npm, docker, etc.)\r\n- **Real-time Loading** - Dynamic command discovery from system PATH\r\n\r\n### User Experience\r\n- 🎨 **Interactive UI** - Beautiful terminal interface with syntax highlighting\r\n- 🔌 **Tool System** - Extensible architecture with specialized tools for different tasks\r\n- 💾 **Context Management** - Smart context handling to maintain conversation continuity\r\n- 📋 **AGENTS.md Integration** - Use `# documentation requests` to auto-generate and maintain project documentation\r\n\r\n## Installation\r\n\r\n```bash\r\nnpm install -g @shareai-lab/kode\r\n```\r\n\r\nAfter installation, you can use any of these commands:\r\n- `kode` - Primary command\r\n- `kwa` - Kode With Agent (alternative)\r\n- `kd` - Ultra-short alias\r\n\r\n## Usage\r\n\r\n### Interactive Mode\r\nStart an interactive session:\r\n```bash\r\nkode\r\n# or\r\nkwa\r\n# or\r\nkd\r\n```\r\n\r\n### Non-Interactive Mode\r\nGet a quick response:\r\n```bash\r\nkode -p \"explain this function\" main.js\r\n# or\r\nkwa -p \"explain this function\" main.js\r\n```\r\n\r\n### Using the @ Mention System\r\n\r\nKode supports a powerful @ mention system for intelligent completions:\r\n\r\n#### 🦜 Expert Model Consultation\r\n```bash\r\n# Consult specific AI models for expert opinions\r\n@ask-claude-sonnet-4 How should I optimize this React component for performance?\r\n@ask-gpt-5 What are the security implications of this authentication method?\r\n@ask-o1-preview Analyze the complexity of this algorithm\r\n```\r\n\r\n#### 👤 Specialized Agent Delegation  \r\n```bash\r\n# Delegate tasks to specialized subagents\r\n@run-agent-simplicity-auditor Review this code for over-engineering\r\n@run-agent-architect Design a microservices architecture for this system\r\n@run-agent-test-writer Create comprehensive tests for these modules\r\n```\r\n\r\n#### 📁 Smart File References\r\n```bash\r\n# Reference files and directories with auto-completion\r\n@src/components/Button.tsx\r\n@docs/api-reference.md\r\n@.env.example\r\n```\r\n\r\nThe @ mention system provides intelligent completions as you type, showing available models, agents, and files.\r\n\r\n### AGENTS.md Documentation Mode\r\n\r\nUse the `#` prefix to generate and maintain your AGENTS.md documentation:\r\n\r\n```bash\r\n# Generate setup instructions\r\n# How do I set up the development environment?\r\n\r\n# Create testing documentation  \r\n# What are the testing procedures for this project?\r\n\r\n# Document deployment process\r\n# Explain the deployment pipeline and requirements\r\n```\r\n\r\nThis mode automatically formats responses as structured documentation and appends them to your AGENTS.md file.\r\n\r\n### Docker Usage\r\n\r\n#### Alternative: Build from local source\r\n\r\n```bash\r\n# Clone the repository\r\ngit clone https://github.com/shareAI-lab/Kode.git\r\ncd Kode\r\n\r\n# Build the image locally\r\ndocker build --no-cache -t kode .\r\n\r\n# Run in your project directory\r\ncd your-project\r\ndocker run -it --rm \\\r\n  -v $(pwd):/workspace \\\r\n  -v ~/.kode:/root/.kode \\\r\n  -v ~/.kode.json:/root/.kode.json \\\r\n  -w /workspace \\\r\n  kode\r\n```\r\n\r\n#### Docker Configuration Details\r\n\r\nThe Docker setup includes:\r\n\r\n- **Volume Mounts**:\r\n  - `$(pwd):/workspace` - Mounts your current project directory\r\n  - `~/.kode:/root/.kode` - Preserves your kode configuration directory between runs\r\n  - `~/.kode.json:/root/.kode.json` - Preserves your kode global configuration file between runs\r\n\r\n- **Working Directory**: Set to `/workspace` inside the container\r\n\r\n- **Interactive Mode**: Uses `-it` flags for interactive terminal access\r\n\r\n- **Cleanup**: `--rm` flag removes the container after exit\r\n\r\n**Note**: Kode uses both `~/.kode` directory for additional data (like memory files) and `~/.kode.json` file for global configuration.\r\n\r\nThe first time you run the Docker command, it will build the image. Subsequent runs will use the cached image for faster startup.\r\n\r\nYou can use the onboarding to set up the model, or `/model`.\r\nIf you don't see the models you want on the list, you can manually set them in `/config`\r\nAs long as you have an openai-like endpoint, it should work.\r\n\r\n### Commands\r\n\r\n- `/help` - Show available commands\r\n- `/model` - Change AI model settings\r\n- `/config` - Open configuration panel\r\n- `/cost` - Show token usage and costs\r\n- `/clear` - Clear conversation history\r\n- `/init` - Initialize project context\r\n\r\n## Multi-Model Intelligent Collaboration\r\n\r\nUnlike official Claude which supports only a single model, Kode implements **true multi-model collaboration**, allowing you to fully leverage the unique strengths of different AI models.\r\n\r\n### 🏗️ Core Technical Architecture\r\n\r\n#### 1. **ModelManager Multi-Model Manager**\r\nWe designed a unified `ModelManager` system that supports:\r\n- **Model Profiles**: Each model has an independent configuration file containing API endpoints, authentication, context window size, cost parameters, etc.\r\n- **Model Pointers**: Users can configure default models for different purposes in the `/model` command:\r\n  - `main`: Default model for main Agent\r\n  - `task`: Default model for SubAgent\r\n  - `reasoning`: Reserved for future ThinkTool usage\r\n  - `quick`: Fast model for simple NLP tasks (security identification, title generation, etc.)\r\n- **Dynamic Model Switching**: Support runtime model switching without restarting sessions, maintaining context continuity\r\n\r\n#### 2. **TaskTool Intelligent Task Distribution**\r\nOur specially designed `TaskTool` (Architect tool) implements:\r\n- **Subagent Mechanism**: Can launch multiple sub-agents to process tasks in parallel\r\n- **Model Parameter Passing**: Users can specify which model SubAgents should use in their requests\r\n- **Default Model Configuration**: SubAgents use the model configured by the `task` pointer by default\r\n\r\n#### 3. **AskExpertModel Expert Consultation Tool**\r\nWe specially designed the `AskExpertModel` tool:\r\n- **Expert Model Invocation**: Allows temporarily calling specific expert models to solve difficult problems during conversations\r\n- **Model Isolation Execution**: Expert model responses are processed independently without affecting the main conversation flow\r\n- **Knowledge Integration**: Integrates expert model insights into the current task\r\n\r\n#### 🎯 Flexible Model Switching\r\n- **Tab Key Quick Switch**: Press Tab in the input box to quickly switch the model for the current conversation\r\n- **`/model` Command**: Use `/model` command to configure and manage multiple model profiles, set default models for different purposes\r\n- **User Control**: Users can specify specific models for task processing at any time\r\n\r\n#### 🔄 Intelligent Work Allocation Strategy\r\n\r\n**Architecture Design Phase**\r\n- Use **o3 model** or **GPT-5 model** to explore system architecture and formulate sharp and clear technical solutions\r\n- These models excel in abstract thinking and system design\r\n\r\n**Solution Refinement Phase**\r\n- Use **gemini model** to deeply explore production environment design details\r\n- Leverage its deep accumulation in practical engineering and balanced reasoning capabilities\r\n\r\n**Code Implementation Phase**\r\n- Use **Qwen Coder model**, **Kimi k2 model**, **GLM-4.5 model**, or **Claude Sonnet 4 model** for specific code writing\r\n- These models have strong performance in code generation, file editing, and engineering implementation\r\n- Support parallel processing of multiple coding tasks through subagents\r\n\r\n**Problem Solving**\r\n- When encountering complex problems, consult expert models like **o3 model**, **Claude Opus 4.1 model**, or **Grok 4 model**\r\n- Obtain deep technical insights and innovative solutions\r\n\r\n#### 💡 Practical Application Scenarios\r\n\r\n```bash\r\n# Example 1: Architecture Design\r\n\"Use o3 model to help me design a high-concurrency message queue system architecture\"\r\n\r\n# Example 2: Multi-Model Collaboration\r\n\"First use GPT-5 model to analyze the root cause of this performance issue, then use Claude Sonnet 4 model to write optimization code\"\r\n\r\n# Example 3: Parallel Task Processing\r\n\"Use Qwen Coder model as subagent to refactor these three modules simultaneously\"\r\n\r\n# Example 4: Expert Consultation\r\n\"This memory leak issue is tricky, ask Claude Opus 4.1 model separately for solutions\"\r\n\r\n# Example 5: Code Review\r\n\"Have Kimi k2 model review the code quality of this PR\"\r\n\r\n# Example 6: Complex Reasoning\r\n\"Use Grok 4 model to help me derive the time complexity of this algorithm\"\r\n\r\n# Example 7: Solution Design\r\n\"Have GLM-4.5 model design a microservice decomposition plan\"\r\n```\r\n\r\n### 🛠️ Key Implementation Mechanisms\r\n\r\n#### **Configuration System**\r\n```typescript\r\n// Example of multi-model configuration support\r\n{\r\n  \"modelProfiles\": {\r\n    \"o3\": { \"provider\": \"openai\", \"model\": \"o3\", \"apiKey\": \"...\" },\r\n    \"claude4\": { \"provider\": \"anthropic\", \"model\": \"claude-sonnet-4\", \"apiKey\": \"...\" },\r\n    \"qwen\": { \"provider\": \"alibaba\", \"model\": \"qwen-coder\", \"apiKey\": \"...\" }\r\n  },\r\n  \"modelPointers\": {\r\n    \"main\": \"claude4\",      // Main conversation model\r\n    \"task\": \"qwen\",         // Task execution model\r\n    \"reasoning\": \"o3\",      // Reasoning model\r\n    \"quick\": \"glm-4.5\"      // Quick response model\r\n  }\r\n}\r\n```\r\n\r\n#### **Cost Tracking System**\r\n- **Usage Statistics**: Use `/cost` command to view token usage and costs for each model\r\n- **Multi-Model Cost Comparison**: Track usage costs of different models in real-time\r\n- **History Records**: Save cost data for each session\r\n\r\n#### **Context Manager**\r\n- **Context Inheritance**: Maintain conversation continuity when switching models\r\n- **Context Window Adaptation**: Automatically adjust based on different models' context window sizes\r\n- **Session State Preservation**: Ensure information consistency during multi-model collaboration\r\n\r\n### 🚀 Advantages of Multi-Model Collaboration\r\n\r\n1. **Maximized Efficiency**: Each task is handled by the most suitable model\r\n2. **Cost Optimization**: Use lightweight models for simple tasks, powerful models for complex tasks\r\n3. **Parallel Processing**: Multiple models can work on different subtasks simultaneously\r\n4. **Flexible Switching**: Switch models based on task requirements without restarting sessions\r\n5. **Leveraging Strengths**: Combine advantages of different models for optimal overall results\r\n\r\n### 📊 Comparison with Official Implementation\r\n\r\n| Feature | Kode | Official Claude |\r\n|---------|------|-----------------|\r\n| Number of Supported Models | Unlimited, configurable for any model | Only supports single Claude model |\r\n| Model Switching | ✅ Tab key quick switch | ❌ Requires session restart |\r\n| Parallel Processing | ✅ Multiple SubAgents work in parallel | ❌ Single-threaded processing |\r\n| Cost Tracking | ✅ Separate statistics for multiple models | ❌ Single model cost |\r\n| Task Model Configuration | ✅ Different default models for different purposes | ❌ Same model for all tasks |\r\n| Expert Consultation | ✅ AskExpertModel tool | ❌ Not supported |\r\n\r\nThis multi-model collaboration capability makes Kode a true **AI Development Workbench**, not just a single AI assistant.\r\n\r\n## Development\r\n\r\nKode is built with modern tools and requires [Bun](https://bun.sh) for development.\r\n\r\n### Install Bun\r\n\r\n```bash\r\n# macOS/Linux\r\ncurl -fsSL https://bun.sh/install | bash\r\n\r\n# Windows\r\npowershell -c \"irm bun.sh/install.ps1 | iex\"\r\n```\r\n\r\n### Setup Development Environment\r\n\r\n```bash\r\n# Clone the repository\r\ngit clone https://github.com/shareAI-lab/kode.git\r\ncd kode\r\n\r\n# Install dependencies\r\nbun install\r\n\r\n# Run in development mode\r\nbun run dev\r\n```\r\n\r\n### Build\r\n\r\n```bash\r\nbun run build\r\n```\r\n\r\n### Testing\r\n\r\n```bash\r\n# Run tests\r\nbun test\r\n\r\n# Test the CLI\r\n./cli.js --help\r\n```\r\n\r\n## Contributing\r\n\r\nWe welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.\r\n\r\n## License\r\n\r\nApache 2.0 License - see [LICENSE](LICENSE) for details.\r\n\r\n## Thanks\r\n\r\n- Some code from @dnakov's anonkode\r\n- Some UI learned from gemini-cli  \r\n- Some system design learned from claude code\r\n\r\n## Support\r\n\r\n- 📚 [Documentation](docs/)\r\n- 🐛 [Report Issues](https://github.com/shareAI-lab/kode/issues)\r\n- 💬 [Discussions](https://github.com/shareAI-lab/kode/discussions)\r\n",
    "projectDocs": "# AGENTS.md\n\n# AGENTS.md\r\n\r\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\r\n\r\n## Development Commands\r\n\r\n### Essential Development Workflow\r\n```bash\r\n# Install dependencies\r\nbun install\r\n\r\n# Run in development mode (hot reload with verbose output)\r\nbun run dev\r\n\r\n# Build the CLI wrapper for distribution\r\nbun run build\r\n\r\n# Clean build artifacts\r\nbun run clean\r\n\r\n# Run tests\r\nbun test\r\n\r\n# Check types\r\nbun run typecheck\r\n\r\n# Format code\r\nbun run format\r\nbun run format:check\r\n```\r\n\r\n### Build System Details\r\n- **Primary Build Tool**: Bun (required for development)\r\n- **Distribution**: Smart CLI wrapper (`cli.js`) that prefers Bun but falls back to Node.js with tsx loader\r\n- **Entry Point**: `src/entrypoints/cli.tsx`\r\n- **Build Output**: `cli.js` (executable wrapper) and `.npmrc` (npm configuration)\r\n\r\n### Publishing\r\n```bash\r\n# Publish to npm (requires build first)\r\nnpm publish\r\n# Or with bundled dependency check skip:\r\nSKIP_BUNDLED_CHECK=true npm publish\r\n```\r\n\r\n## High-Level Architecture\r\n\r\n### Core System Design\r\nKode implements a **three-layer parallel architecture** inspired by Claude Code:\r\n\r\n1. **User Interaction Layer** (`src/screens/REPL.tsx`)\r\n   - Interactive terminal interface using Ink (React for CLI)\r\n   - Command parsing and user input handling\r\n   - Real-time UI updates and syntax highlighting\r\n\r\n2. **Orchestration Layer** (`src/tools/TaskTool/`)\r\n   - Dynamic agent system for task delegation\r\n   - Multi-model collaboration and switching\r\n   - Context management and conversation continuity\r\n\r\n3. **Tool Execution Layer** (`src/tools/`)\r\n   - Specialized tools for different capabilities (File I/O, Bash, Grep, etc.)\r\n   - Permission system for secure tool access\r\n   - MCP (Model Context Protocol) integration\r\n\r\n### Multi-Model Architecture\r\n**Key Innovation**: Unlike single-model systems, Kode supports unlimited AI models with intelligent collaboration:\r\n\r\n- **ModelManager** (`src/utils/model.ts`): Unified model configuration and switching\r\n- **Model Profiles**: Each model has independent API endpoints, authentication, and capabilities\r\n- **Model Pointers**: Default models for different purposes (main, task, reasoning, quick)\r\n- **Dynamic Switching**: Runtime model changes without session restart\r\n\r\n### Agent System (`src/utils/agentLoader.ts`)\r\n**Dynamic Agent Configuration Loading** with 5-tier priority system:\r\n1. Built-in (code-embedded)\r\n2. `~/.claude/agents/` (Claude user)\r\n3. `~/.kode/agents/` (Kode user)\r\n4. `./.claude/agents/` (Claude project)\r\n5. `./.kode/agents/` (Kode project)\r\n\r\nAgents are defined as markdown files with YAML frontmatter:\r\n```markdown\r\n---\r\nname: agent-name\r\ndescription: \"When to use this agent\"\r\ntools: [\"FileRead\", \"Bash\"] # or \"*\" for all tools\r\nmodel: model-name # optional\r\n---\r\n\r\nSystem prompt content here...\r\n```\r\n\r\n### Tool Architecture\r\nEach tool follows a consistent pattern in `src/tools/[ToolName]/`:\r\n- `[ToolName].tsx`: Main tool implementation with React UI\r\n- `prompt.ts`: Tool-specific system prompts\r\n- Tool schema using Zod for validation\r\n- Permission-aware execution\r\n\r\n### Service Layer\r\n- **Claude Service** (`src/services/claude.ts`): Primary AI model interface\r\n- **OpenAI Service** (`src/services/openai.ts`): OpenAI-compatible models\r\n- **Model Adapter Factory** (`src/services/modelAdapterFactory.ts`): Unified model interface\r\n- **MCP Client** (`src/services/mcpClient.ts`): Model Context Protocol for tool extensions\r\n\r\n### Configuration System (`src/utils/config.ts`)\r\n**Hierarchical Configuration** supporting:\r\n- Global config (`~/.kode.json`)\r\n- Project config (`./.kode.json`)\r\n- Environment variables\r\n- CLI parameter overrides\r\n- Multi-model profile management\r\n\r\n### Context Management\r\n- **Message Context Manager** (`src/utils/messageContextManager.ts`): Intelligent context window handling\r\n- **Memory Tools** (`src/tools/MemoryReadTool/`, `src/tools/MemoryWriteTool/`): Persistent memory across sessions\r\n- **Project Context** (`src/context.ts`): Codebase understanding and file relationships\r\n\r\n### Permission System (`src/permissions.ts`)\r\n**Security-First Tool Access**:\r\n- Granular permission requests for each tool use\r\n- User approval required for file modifications and command execution\r\n- Tool capability filtering based on agent configuration\r\n- Secure file path validation and sandboxing\r\n\r\n## Important Implementation Details\r\n\r\n### Async Tool Descriptions\r\n**Critical**: Tool descriptions are async functions that must be awaited:\r\n```typescript\r\n// INCORRECT\r\nconst description = tool.description\r\n\r\n// CORRECT\r\nconst description = typeof tool.description === 'function' \r\n  ? await tool.description() \r\n  : tool.description\r\n```\r\n\r\n### Agent Loading Performance\r\n- **Memoization**: LRU cache to avoid repeated file I/O\r\n- **Hot Reload**: File system watchers for real-time agent updates\r\n- **Parallel Loading**: All agent directories scanned concurrently\r\n\r\n### UI Framework Integration\r\n- **Ink**: React-based terminal UI framework\r\n- **Component Structure**: Follows React patterns with hooks and context\r\n- **Terminal Handling**: Custom input handling for complex interactions\r\n\r\n### Error Handling Strategy\r\n- **Graceful Degradation**: System continues with built-in agents if loading fails\r\n- **User-Friendly Errors**: Clear error messages with suggested fixes\r\n- **Debug Logging**: Comprehensive logging system (`src/utils/debugLogger.ts`)\r\n\r\n### TypeScript Integration\r\n- **Strict Types**: Full TypeScript coverage with strict mode\r\n- **Zod Schemas**: Runtime validation for all external data\r\n- **Tool Typing**: Consistent `Tool` interface for all tools\r\n\r\n## Key Files for Understanding the System\r\n\r\n### Core Entry Points\r\n- `src/entrypoints/cli.tsx`: Main CLI application entry\r\n- `src/screens/REPL.tsx`: Interactive terminal interface\r\n\r\n### Tool System\r\n- `src/tools.ts`: Tool registry and exports\r\n- `src/Tool.ts`: Base tool interface definition\r\n- `src/tools/TaskTool/TaskTool.tsx`: Agent orchestration tool\r\n\r\n### Configuration & Model Management\r\n- `src/utils/config.ts`: Configuration management\r\n- `src/utils/model.ts`: Model manager and switching logic\r\n- `src/utils/agentLoader.ts`: Dynamic agent configuration loading\r\n\r\n### Services & Integrations\r\n- `src/services/claude.ts`: Main AI service integration\r\n- `src/services/mcpClient.ts`: MCP tool integration\r\n- `src/utils/messageContextManager.ts`: Context window management\r\n\r\n## Development Patterns\r\n\r\n### Adding New Tools\r\n1. Create directory in `src/tools/[ToolName]/`\r\n2. Implement `[ToolName].tsx` following existing patterns\r\n3. Add `prompt.ts` for tool-specific prompts\r\n4. Register in `src/tools.ts`\r\n5. Update tool permissions in agent configurations\r\n\r\n### Adding New Commands\r\n1. Create command file in `src/commands/[command].tsx`\r\n2. Implement command logic with Ink UI components\r\n3. Register in `src/commands.ts`\r\n4. Add command to help system\r\n\r\n### Model Integration\r\n1. Add model profile to `src/constants/models.ts`\r\n2. Implement adapter if needed in `src/services/adapters/`\r\n3. Update model capabilities in `src/constants/modelCapabilities.ts`\r\n4. Test with existing tool suite\r\n\r\n### Agent Development\r\n1. Create `.md` file with proper YAML frontmatter\r\n2. Place in appropriate directory based on scope\r\n3. Test with `/agents` command\r\n4. Verify tool permissions work correctly\n\n---\n\n# CLAUDE.md\n\n# CLAUDE.md\r\n\r\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\r\n\r\n## Development Commands\r\n\r\n### Essential Development Workflow\r\n```bash\r\n# Install dependencies\r\nbun install\r\n\r\n# Run in development mode (hot reload with verbose output)\r\nbun run dev\r\n\r\n# Build the CLI wrapper for distribution\r\nbun run build\r\n\r\n# Clean build artifacts\r\nbun run clean\r\n\r\n# Run tests\r\nbun test\r\n\r\n# Check types\r\nbun run typecheck\r\n\r\n# Format code\r\nbun run format\r\nbun run format:check\r\n```\r\n\r\n### Build System Details\r\n- **Primary Build Tool**: Bun (required for development)\r\n- **Distribution**: Smart CLI wrapper (`cli.js`) that prefers Bun but falls back to Node.js with tsx loader\r\n- **Entry Point**: `src/entrypoints/cli.tsx`\r\n- **Build Output**: `cli.js` (executable wrapper) and `.npmrc` (npm configuration)\r\n\r\n### Publishing\r\n```bash\r\n# Publish to npm (requires build first)\r\nnpm publish\r\n# Or with bundled dependency check skip:\r\nSKIP_BUNDLED_CHECK=true npm publish\r\n```\r\n\r\n## High-Level Architecture\r\n\r\n### Core System Design\r\nKode implements a **three-layer parallel architecture** inspired by Claude Code:\r\n\r\n1. **User Interaction Layer** (`src/screens/REPL.tsx`)\r\n   - Interactive terminal interface using Ink (React for CLI)\r\n   - Command parsing and user input handling\r\n   - Real-time UI updates and syntax highlighting\r\n\r\n2. **Orchestration Layer** (`src/tools/TaskTool/`)\r\n   - Dynamic agent system for task delegation\r\n   - Multi-model collaboration and switching\r\n   - Context management and conversation continuity\r\n\r\n3. **Tool Execution Layer** (`src/tools/`)\r\n   - Specialized tools for different capabilities (File I/O, Bash, Grep, etc.)\r\n   - Permission system for secure tool access\r\n   - MCP (Model Context Protocol) integration\r\n\r\n### Multi-Model Architecture\r\n**Key Innovation**: Unlike single-model systems, Kode supports unlimited AI models with intelligent collaboration:\r\n\r\n- **ModelManager** (`src/utils/model.ts`): Unified model configuration and switching\r\n- **Model Profiles**: Each model has independent API endpoints, authentication, and capabilities\r\n- **Model Pointers**: Default models for different purposes (main, task, reasoning, quick)\r\n- **Dynamic Switching**: Runtime model changes without session restart\r\n\r\n### Agent System (`src/utils/agentLoader.ts`)\r\n**Dynamic Agent Configuration Loading** with 5-tier priority system:\r\n1. Built-in (code-embedded)\r\n2. `~/.claude/agents/` (Claude user)\r\n3. `~/.kode/agents/` (Kode user)\r\n4. `./.claude/agents/` (Claude project)\r\n5. `./.kode/agents/` (Kode project)\r\n\r\nAgents are defined as markdown files with YAML frontmatter:\r\n```markdown\r\n---\r\nname: agent-name\r\ndescription: \"When to use this agent\"\r\ntools: [\"FileRead\", \"Bash\"] # or \"*\" for all tools\r\nmodel: model-name # optional\r\n---\r\n\r\nSystem prompt content here...\r\n```\r\n\r\n### Tool Architecture\r\nEach tool follows a consistent pattern in `src/tools/[ToolName]/`:\r\n- `[ToolName].tsx`: Main tool implementation with React UI\r\n- `prompt.ts`: Tool-specific system prompts\r\n- Tool schema using Zod for validation\r\n- Permission-aware execution\r\n\r\n### Service Layer\r\n- **Claude Service** (`src/services/claude.ts`): Primary AI model interface\r\n- **OpenAI Service** (`src/services/openai.ts`): OpenAI-compatible models\r\n- **Model Adapter Factory** (`src/services/modelAdapterFactory.ts`): Unified model interface\r\n- **MCP Client** (`src/services/mcpClient.ts`): Model Context Protocol for tool extensions\r\n\r\n### Configuration System (`src/utils/config.ts`)\r\n**Hierarchical Configuration** supporting:\r\n- Global config (`~/.kode.json`)\r\n- Project config (`./.kode.json`)\r\n- Environment variables\r\n- CLI parameter overrides\r\n- Multi-model profile management\r\n\r\n### Context Management\r\n- **Message Context Manager** (`src/utils/messageContextManager.ts`): Intelligent context window handling\r\n- **Memory Tools** (`src/tools/MemoryReadTool/`, `src/tools/MemoryWriteTool/`): Persistent memory across sessions\r\n- **Project Context** (`src/context.ts`): Codebase understanding and file relationships\r\n\r\n### Permission System (`src/permissions.ts`)\r\n**Security-First Tool Access**:\r\n- Granular permission requests for each tool use\r\n- User approval required for file modifications and command execution\r\n- Tool capability filtering based on agent configuration\r\n- Secure file path validation and sandboxing\r\n\r\n## Important Implementation Details\r\n\r\n### Async Tool Descriptions\r\n**Critical**: Tool descriptions are async functions that must be awaited:\r\n```typescript\r\n// INCORRECT\r\nconst description = tool.description\r\n\r\n// CORRECT\r\nconst description = typeof tool.description === 'function' \r\n  ? await tool.description() \r\n  : tool.description\r\n```\r\n\r\n### Agent Loading Performance\r\n- **Memoization**: LRU cache to avoid repeated file I/O\r\n- **Hot Reload**: File system watchers for real-time agent updates\r\n- **Parallel Loading**: All agent directories scanned concurrently\r\n\r\n### UI Framework Integration\r\n- **Ink**: React-based terminal UI framework\r\n- **Component Structure**: Follows React patterns with hooks and context\r\n- **Terminal Handling**: Custom input handling for complex interactions\r\n\r\n### Error Handling Strategy\r\n- **Graceful Degradation**: System continues with built-in agents if loading fails\r\n- **User-Friendly Errors**: Clear error messages with suggested fixes\r\n- **Debug Logging**: Comprehensive logging system (`src/utils/debugLogger.ts`)\r\n\r\n### TypeScript Integration\r\n- **Strict Types**: Full TypeScript coverage with strict mode\r\n- **Zod Schemas**: Runtime validation for all external data\r\n- **Tool Typing**: Consistent `Tool` interface for all tools\r\n\r\n## Key Files for Understanding the System\r\n\r\n### Core Entry Points\r\n- `src/entrypoints/cli.tsx`: Main CLI application entry\r\n- `src/screens/REPL.tsx`: Interactive terminal interface\r\n\r\n### Tool System\r\n- `src/tools.ts`: Tool registry and exports\r\n- `src/Tool.ts`: Base tool interface definition\r\n- `src/tools/TaskTool/TaskTool.tsx`: Agent orchestration tool\r\n\r\n### Configuration & Model Management\r\n- `src/utils/config.ts`: Configuration management\r\n- `src/utils/model.ts`: Model manager and switching logic\r\n- `src/utils/agentLoader.ts`: Dynamic agent configuration loading\r\n\r\n### Services & Integrations\r\n- `src/services/claude.ts`: Main AI service integration\r\n- `src/services/mcpClient.ts`: MCP tool integration\r\n- `src/utils/messageContextManager.ts`: Context window management\r\n\r\n## Development Patterns\r\n\r\n### Adding New Tools\r\n1. Create directory in `src/tools/[ToolName]/`\r\n2. Implement `[ToolName].tsx` following existing patterns\r\n3. Add `prompt.ts` for tool-specific prompts\r\n4. Register in `src/tools.ts`\r\n5. Update tool permissions in agent configurations\r\n\r\n### Adding New Commands\r\n1. Create command file in `src/commands/[command].tsx`\r\n2. Implement command logic with Ink UI components\r\n3. Register in `src/commands.ts`\r\n4. Add command to help system\r\n\r\n### Model Integration\r\n1. Add model profile to `src/constants/models.ts`\r\n2. Implement adapter if needed in `src/services/adapters/`\r\n3. Update model capabilities in `src/constants/modelCapabilities.ts`\r\n4. Test with existing tool suite\r\n\r\n### Agent Development\r\n1. Create `.md` file with proper YAML frontmatter\r\n2. Place in appropriate directory based on scope\r\n3. Test with `/agents` command\r\n4. Verify tool permissions work correctly"
  },
  "exportId": "0d96bba2-3ba0-495c-a64a-c356d08507e2"
}